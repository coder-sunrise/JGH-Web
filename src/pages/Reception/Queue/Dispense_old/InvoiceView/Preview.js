import React, { PureComponent } from 'react'
import classnames from 'classnames'
// umi
import { FormattedMessage, formatMessage } from 'umi/locale'
// material ui
import { withStyles } from '@material-ui/core'
import { ViewList } from '@material-ui/icons'
// custom components
import {
  Button,
  GridContainer,
  GridItem,
  TextField,
  Tooltip,
  Transition,
} from '@/components'
// sub components
import DispenseGrid from '../DispenseGrid'
import StatusIndicator from './StatusIndicator'

const STYLES = () => ({
  invoiceInfoContainer: {
    marginBottom: '10px',
  },
  disclaimerContainer: {
    float: 'right',
    textAlign: 'right',
  },
  buttonGroup: {
    margin: '10px 0',
    display: 'flex',
    justifyContent: 'flex-end',
  },
})

class Preview extends PureComponent {
  render () {
    const {
      classes,
      isFinalized,
      handleEditClick,
      handleFinalizeClick,
      handleUnlockClick,
      handlePrintInvoice,
      handlePrintInvoiceWithSummary,
      invoiceValues,
    } = this.props

    return (
      <div>
        <GridContainer className={classnames(classes.invoiceInfoContainer)}>
          <GridItem xs md={2}>
            <TextField
              label='Invoice No'
              value={invoiceValues.invoiceNo}
              disabled
            />
          </GridItem>
          <GridItem xs md={2}>
            <TextField
              label='Invoice Date'
              value={invoiceValues.invoiceDate}
              disabled
            />
          </GridItem>
          <GridItem xs md={2}>
            <StatusIndicator status={invoiceValues.status} />
          </GridItem>
          <GridItem xs md={6}>
            <div className={classnames(classes.disclaimerContainer)}>
              <p>Generated by Medisys Innovation</p>
              <p>Finalized by Medisys Innovation on 30 Apr 2019 09:35</p>
            </div>
          </GridItem>
        </GridContainer>
        <DispenseGrid />
        <div>
          <div className={classnames(classes.buttonGroup)}>
            {!isFinalized && (
              <Transition show={!isFinalized}>
                <div>
                  <Button color='primary' onClick={handleEditClick}>
                    <FormattedMessage id='reception.queue.dispense.edit' />
                  </Button>
                  <Button color='primary' onClick={handleFinalizeClick}>
                    <FormattedMessage id='reception.queue.dispense.finalize' />
                  </Button>
                </div>
              </Transition>
            )}
            {isFinalized && (
              <Transition show={isFinalized}>
                <div>
                  <Button color='primary' onClick={handleUnlockClick}>
                    <FormattedMessage id='reception.queue.dispense.Unlock' />
                  </Button>
                  <Button color='primary' onClick={handlePrintInvoice}>
                    <FormattedMessage id='reception.queue.dispense.printInvoice' />
                  </Button>
                  <Tooltip
                    title={formatMessage({
                      id: 'reception.queue.dispense.printInvoiceWithSummary',
                    })}
                  >
                    <Button
                      color='primary'
                      justIcon
                      onClick={handlePrintInvoiceWithSummary}
                    >
                      <ViewList />
                    </Button>
                  </Tooltip>
                </div>
              </Transition>
            )}

            <Button color='primary'>
              <FormattedMessage id='reception.queue.dispense.printDrugLabel' />
            </Button>
          </div>
        </div>
      </div>
    )
  }
}

export default withStyles(STYLES)(Preview)
